#!/usr/bin/env python3

"""jemdoc version 0.7.3, 2012-11-27."""

# Copyright (C) 2007-2012 Jacob Mattingley (jacobm@stanford.edu).
#
# This file is part of jemdoc.
#
# jemdoc is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# jemdoc is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#
# The LaTeX equation portions of this file were initially based on
# latexmath2png, by Kamil Kisiel (kamil@kamikisiel.net).
#

import sys
import os
import re
import time
import io
import collections

def version():
  print(__doc__)
  print('Platform:', sys.platform)
  print('Python:', sys.version[:5], 'located at', sys.executable)
  print('Equation support:', 'mathjax')
  print('Markdown support:', 'markdown')

def showhelp():
  a = """Usage: jemdoc [OPTIONS] [SOURCEFILE]
  Produces html markup from a jemdoc SOURCEFILE.

  Most of the time you can use jemdoc without any additional flags.
  For example, typing

    jemdoc index

  will produce an index.html from index.jemdoc, using a default
  configuration.

  Some configuration options can be overridden by specifying a
  configuration file.  You can use

    jemdoc --show-config

  to print a sample configuration file (which includes all of the
  default options). Any or all of the configuration [blocks] can be
  overwritten by including them in a configuration file, and running,
  for example,

    jemdoc -c mywebsite.conf index.jemdoc

  You can view version and installation details with

    jemdoc --version

  See http://jemdoc.jaboc.net/ for many more details."""
  print(a.replace("\n  ", "\n").strip())

def printStandardConfig():
  for i in standardconf().items():
      print("[%s]%s" % i)

def standardconf():
  a = collections.defaultdict(lambda: ("", ""))
  a["html"] = """
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
    "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
  <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  ""","""
  </html>
  """
  
  a["head"] ="""
  <head>
  <meta name="generator" content="jemdoc, see http://jemdoc.jaboc.net/" />
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  ""","""
  </head>
  """

  a["body"] = """
  <body>
  """, """
  </body>
  """

  # used in header for window title.
  a["title"] = """
  <title>
  ""","""
  </title>
  """

  a["header"] = """
  <header>
  """, """
  </header>
  """

  a["footer"] = """
  <footer>
  """, """
  </footer>
  """

  a["mathjax"] = """
  <!-- MathJax -->
  <script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML">
  </script>
  <script type="text/x-mathjax-config">
  MathJax.Hub.Config({
  	  TeX: { equationNumbers: { autoNumber: "AMS" } }
  });
  </script>
  <!-- End MathJax -->
  """, ""

  a["lastupdated"] = """
  Page generated ""","""
  by <a href="https://github.com/wsshin/jemdoc_mathjax" target="blank">jemdoc+MathJax</a>.
  """

  return a

def parseconf(cns):
  syntax = standardconf()
  
  for sname in cns:
      with io.open(sname, 'rb') as f:
        while pc(controlstruct(f)) != '':
          l = readnoncomment(f)
          r = re.match(r'\[(.*)\]\n', l)

          if r:
            tag = r.group(1)

            s = ''
            l = readnoncomment(f)
            while l not in ('\n', ''):
              s += l
              l = readnoncomment(f)

            syntax[tag] = s

  return syntax

def mathjaxussub(link):
  return link.replace('_', 'UNDERSCORE65358')

def mathjaxusresub(r):
  return re.sub('UNDERSCORE65358', '_', r)

def mathjaxeqsub(eqtext):
  eqtext = eqtext.replace('\\', 'BACKSLASH65358')
  eqtext = eqtext.replace('[', 'OPENBRACKET65358')
  eqtext = eqtext.replace(']', 'CLOSEBRACKET65358')
  eqtext = eqtext.replace('*', 'ASTERISK65358')
  eqtext = eqtext.replace('+', 'PLUS65358')
  eqtext = eqtext.replace('&', 'AMPERSAND65358')
  eqtext = eqtext.replace('<', 'LESSTHAN65358')
  eqtext = eqtext.replace('>', 'GREATERTHAN65358')
#  eqtext = eqtext.replace('\n', ' ')
  eqtext = eqtext.replace('_', 'UNDERSCORE65358')
  eqtext = eqtext.replace('/', 'SLASH65358')

  return eqtext

def mathjaxeqresub(r):
  r = re.sub('BACKSLASH65358', r'\\', r)
  r = re.sub('OPENBRACKET65358', '[', r)
  r = re.sub('CLOSEBRACKET65358', ']', r)
  r = re.sub('ASTERISK65358', '*', r)
  r = re.sub('PLUS65358', '+', r)
  r = re.sub('AMPERSAND65358', '&', r)
  r = re.sub('LESSTHAN65358', '<', r)
  r = re.sub('GREATERTHAN65358', '>', r)
  r = re.sub('QUOTATION65358', '"', r)
  r = re.sub('UNDERSCORE65358', '_', r)
  r = re.sub('SLASH65358', '/', r)

  return r

def mdown(lines):
  # Best option - python module
  try:
    import markdown
    return markdown.markdown(lines)
  except:
    pass

  # Next best - system path
  try:
    import subprocess
    pass
    return i
  except:
    pass

  # Last resort - github
  import urllib
  return i

 
def parse_meta(line):
    if not line.startswith("<njnmdoc "):
        return defaultdict(), False

    # https://stackoverflow.com/a/38305337/986793
    m = re.compile(r"""((?:(?!\s|=).)*)\s*?=\s*?["']?((?:(?<=")(?:(?<=\\)"|[^"])*|(?<=')(?:(?<=\\)'|[^'])*)|(?:(?!"|')(?:(?!\/>|>|\s).)+))""")

    meta = dict(m.findall(line))

    meta['lastupdated'] = time.strftime( '%Y-%m-%d', time.localtime(time.time()))

    if 'menu' in meta:
        with open(meta['menu']) as menu:
            meta['menu'] = mdown(menu.read())

    return meta, True


def Rndr(block, *args):
    return "".join([block[0], *args, block[1]])

# this is the main template
def template(config, meta, content):
    a = config
    return \
    Rndr(a["html"],
        Rndr(a["head"],
            Rndr(a['mathjax']),
            Rndr(a["title"], meta['title'])),
        Rndr(a["body"],
            Rndr(a["header"], meta['title']),
            Rndr(a["nav"], meta['menu']),
            Rndr(a["content"], content),
            Rndr(a["footer"],
                Rndr(a['lastupdated'], meta['lastupdated']))
            )
        )



def build(infile, outfile, config):
    a = config

    with open(infile, 'r') as input:
        meta = input.readline()
        content = input.read()

    meta, valid = parse_meta(meta)
    if not valid:
        content.insert(0, meta)

    content = mdown(content)

    html = template(config, meta, content)

    with open(outfile, 'w') as out:
        out.write(html)


def main():
  if len(sys.argv) == 1 or sys.argv[1] in ('--help', '-h'):
    showhelp()
    raise SystemExit
  if sys.argv[1] == '--show-config':
    printStandardConfig()
    raise SystemExit
  if sys.argv[1] == '--version':
    version()
    raise SystemExit

  outname = None
  confnames = []
  for i in range(1, len(sys.argv), 2):
    if sys.argv[i] == '-o':
      if outname is not None:
        raise RuntimeError("only one output file / directory, please")
      outname = sys.argv[i+1]
    elif sys.argv[i] == '-c':
      confnames.append(sys.argv[i+1])
    elif sys.argv[i].startswith('-'):
      raise RuntimeError('unrecognised argument %s, try --help' % sys.argv[i])
    else:
      break

  conf = parseconf(confnames)

  innames = []
  for inname in sys.argv[i:]:
    # First, if not a file and no dot, try opening .jemdoc. Otherwise, fall back
    # to just doing exactly as asked.
    if not os.path.isfile(inname):
      if not os.path.isfile(inname + ".jemdoc"):
          raise RuntimeError('unrecognised file %s' % inname)
      inname += '.jemdoc'

    innames.append(inname)

  if outname is not None and not os.path.isdir(outname) and len(innames) > 1:
    raise RuntimeError('cannot handle one outfile with multiple infiles')

  for inname in innames:
    if outname is None:
      thisout = re.sub(r'.jemdoc$', '', inname) + '.html'
    elif os.path.isdir(outname):
      # if directory, prepend directory to automatically generated name.
      thisout = outname + re.sub(r'.jemdoc$', '', inname) + '.html'
    else:
      thisout = outname

    build(inname, thisout, conf)



if __name__ == '__main__':
  main()
