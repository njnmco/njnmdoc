#!/usr/bin/env python3

"""njnmdoc version 0.7.3, 2012-11-27."""

# Copyright (C) 2007-2012 Jacob Mattingley (jacobm@stanford.edu),
# 2012-2015 Wonseok Shin, 2019 Neal Fultz
#
# This file is part of njnmdoc.
#
# njnmdoc is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# njnmdoc is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#

import sys
import os
import re
import time
import io
import collections

SUFFIX = '.md'

def version():
    print(__doc__)
    print('Platform:', sys.platform)
    print('Python:', sys.version[:5], 'located at', sys.executable)
    print('Equation support:', 'KaTex')
    print('Markdown support:', detect_mdown()[0])

def deindent(a):
    return a.replace("\n    ", "\n").strip()

def showhelp():
    a = """
    Usage: njnmdoc [OPTIONS] [SOURCEFILE...]
    Produces html markup from a njnmdoc SOURCEFILE.
  
    Most of the time you can use njnmdoc without any additional flags.
    For example, typing
  
      njnmdoc index
  
    will produce an index.html from index.njnmdoc, using a default
    configuration.
  
    Some configuration options can be overridden by specifying a
    configuration file.  You can use
  
      njnmdoc --show-config
  
    to print a sample configuration file (which includes all of the
    default options). Any or all of the configuration [blocks] can be
    overwritten by including them in a configuration file, and running,
    for example,
  
      njnmdoc -c mywebsite.conf index.njnmdoc
  
    You can view version and installation details with
  
      njnmdoc --version
  
    See http://github.com/njnmco/njnmdoc for many more details.
    """
    print(deindent(a))

def printStandardConfig():
    import pprint
    for k,v in standardconf().items():
        print("config['%s'] = %s" % (k, pprint.pformat(v)))

class tagdict(collections.defaultdict):
    def __missing__(self, key):
        return "<%s>" % key, "</%s>\n" % key

def standardconf():
    a = tagdict()
    a["html"] = """
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
      "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
    ""","""
    </html>
    """
    
    a["head"] ="""
    <head>
      <meta name="generator" content="njnmdoc, see http://github.com/njnmco/njnmdoc" />
      <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
      ""","""
    </head>
    """

    a["css"] = "<link rel='stylesheet' type='text/css' href='", "' /> "
  
    a["mathjax"] = """
    <!-- MathJax -->
    <script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>
    <!-- End MathJax -->
    """, ""

    a["katex"] = """
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css" integrity="sha384-yFRtMMDnQtDRO8rLpMIKrtPCD5jdktao2TV19YiZYWMDkUR5GQZR/NOVTdquEx1j" crossorigin="anonymous">
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.js" integrity="sha384-9Nhn55MVVN0/4OFx7EE5kpFBPsEMZxKTCnA+4fqDmg12eCTqGi6+BB2LjY8brQxJ" crossorigin="anonymous"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/auto-render.min.js" integrity="sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI" crossorigin="anonymous"
        onload="renderMathInElement(document.body);"></script>
    """, ""
  
    a["lastupdated"] = """
    Page generated by <a href="https://github.com/njnmco/njnmdoc" target="blank">njnmdoc</a>
    on&nbsp;
    """, "."

    for k, v in a.items():
        a[k] = deindent(v[0]), deindent(v[1])
  
    return a


def mdown_python(lines):
    import markdown
    return markdown.markdown(lines)

def mdown_markdown(lines):
    import subprocess
    return subprocess.run(["markdown"], input=lines, stdout=subprocess.PIPE, shell=True, encoding='utf8').stdout

def mdown_pandoc(lines):
    import subprocess
    return subprocess.run(["pandoc", "-f", "markdown", "-t", "html"],
                          input=lines, stdout=subprocess.PIPE, shell=True, encoding='utf8').stdout

def mdown_github(lines):
    import urllib.parse
    import urllib.request
    url = "https://api.github.com/markdown/raw"
    hdr = {"Content-Type":"text/x-markdown",
            "User-Agent":"njnmdoc http://github.com/njnmco/njnmdoc"}
    if "TRAVIS_REPO_SLUG" in os.environ:
        hdr["User-Agent"] = hdr["User-Agent"] + " via Travis CI (%s)" % os.environ["TRAVIS_REPO_SLUG"]

    req = urllib.request.Request(url, headers=hdr)
    with urllib.request.urlopen(req, lines.encode('ascii')) as f:
        return f.read().decode('utf-8')

def detect_mdown():
    # Best option - python module
    try:
        import markdown
        return"python", mdown_python
    except ModuleNotFoundError as mnfe:
        pass

    import subprocess
    # Next best - markdown on system path
    try:
        subprocess.run(["markdown", "-v"], stdout=subprocess.DEVNULL)
        return "markdown", mdown_markdown
    except FileNotFoundError as fne:
        pass
  
    # Next best - pandoc on system path
    try:
        subprocess.run(["pandoc", "-v"], stdout=subprocess.DEVNULL)
        return "pandoc", mdown_pandoc
    except FileNotFoundError as fne:
        pass
  
    # Last resort - github
    return "github", mdown_github

 
def parse_modeline(content):
    # config is needed for using detected markdown implementation. todo
    line = io.StringIO(content).readline()
    if not line.startswith("<!-- njnmdoc: "):
        return {}

    # strip out the attributes
    # https://stackoverflow.com/a/38305337/986793
    m = re.compile(r"""((?:(?!\s|=).)*)\s*?=\s*?["']?((?:(?<=")(?:(?<=\\)"|[^"])*|(?<=')(?:(?<=\\)'|[^'])*)|(?:(?!"|')(?:(?!\/>|>|\s).)+))""")

    return dict(m.findall(line))

        
def meta_defaults():
    meta = collections.ChainMap(collections.defaultdict(str))

    meta['lastupdated'] = time.strftime( '%Y-%m-%d', time.localtime(time.time()))
    meta['css'] = 'jemdoc.css'

    return meta


def Rndr(block, *args):
    return "".join([block[0], *args, block[1]])

# this is the main template
def template(config, meta, content):
    a = config
    return \
    Rndr(a["html"],
	     Rndr(a["head"],
	         Rndr(a["title"], meta['title']),
	         Rndr(a['katex']),
	         Rndr(a["css"], meta['css'])),
	     Rndr(a["body"],
	         Rndr(a["header"], meta['title']),
	         Rndr(a["nav"], meta['menu']),
	         Rndr(a["content"], content),
	         Rndr(a["footer"],
	             Rndr(a['lastupdated'], meta['lastupdated']))
	     )
        )



def build(infile, outfile, config, meta, mdown):

    with open(infile, 'r') as input:
        content = input.read()

    meta.update(parse_modeline(content))

    # Menu needs to be handled specially?
    if 'menu' in meta:
        with open(meta['menu']) as menu:
            meta['menu'] = mdown(menu.read())

    html = template(config, meta, mdown(content))

    with open(outfile, 'w') as out:
        out.write(html)


def main(argv):

    if len(argv) == 1 or argv[1] in ('--help', '-h'):
        showhelp()
        raise SystemExit
    if argv[1] == '--show-config':
        printStandardConfig()
        raise SystemExit
    if argv[1] == '--version':
        version()
        raise SystemExit

    config = standardconf()
    base_meta = meta_defaults()
    markdown = None

    outname = '.'
    for i in range(1, len(argv), 2):
        if argv[i] == '-o':
            if outname != '.':
              raise RuntimeError("only one output file / directory, please")
            outname = argv[i+1]
        elif argv[i] == '-c':
            exec(open(argv[i+1]).read(), {'config':config})
        elif argv[i] == '--markdown':
            markdown = globals().get(argv[i+1])
        elif argv[i].startswith('-e'):
            k,v = argv[i+1].split("=")
            base_meta[k] = v
        elif argv[i].startswith('-'):
            raise RuntimeError('unrecognised argument %s, try --help' % argv[i])
        else:
            break

    if markdown is None:
        markdown = detect_mdown()[1]

    innames = []
    for inname in argv[i:]:
        # First, if not a file, try checking file.njnmdoc. Otherwise, fail.
        if not os.path.isfile(inname):
            if not os.path.isfile(inname + SUFFIX):
                raise RuntimeError('unrecognised file %s' % inname)
            inname += SUFFIX

        innames.append(inname)

    if not os.path.isdir(outname):
        if len(innames) > 1:
            raise RuntimeError('cannot handle one outfile with multiple infiles')
        build(innames.pop(), outname, config, base_meta, markdown)


    for inname in innames:
        thisout = re.sub(SUFFIX, '', inname) + '.html'
        thisout = os.path.join(outname, thisout)
        build(inname, thisout, config, base_meta.new_child(), markdown)



if __name__ == '__main__':
    main(sys.argv)
