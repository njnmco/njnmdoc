#!/usr/bin/env python3

"""jemdoc version 0.7.3, 2012-11-27."""

# Copyright (C) 2007-2012 Jacob Mattingley (jacobm@stanford.edu).
#
# This file is part of jemdoc.
#
# jemdoc is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# jemdoc is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#
# The LaTeX equation portions of this file were initially based on
# latexmath2png, by Kamil Kisiel (kamil@kamikisiel.net).
#

import sys
import os
import re
import time
import io
import collections

def version():
    print(__doc__)
    print('Platform:', sys.platform)
    print('Python:', sys.version[:5], 'located at', sys.executable)
    print('Equation support:', 'KaTex')
    print('Markdown support:', detect_mdown()[0])

def showhelp():
    a = """
    Usage: njnmdoc [OPTIONS] [SOURCEFILE]
    Produces html markup from a jemdoc SOURCEFILE.
  
    Most of the time you can use jemdoc without any additional flags.
    For example, typing
  
      jemdoc index
  
    will produce an index.html from index.jemdoc, using a default
    configuration.
  
    Some configuration options can be overridden by specifying a
    configuration file.  You can use
  
      jemdoc --show-config
  
    to print a sample configuration file (which includes all of the
    default options). Any or all of the configuration [blocks] can be
    overwritten by including them in a configuration file, and running,
    for example,
  
      jemdoc -c mywebsite.conf index.jemdoc
  
    You can view version and installation details with
  
      jemdoc --version
  
    See http://jemdoc.jaboc.net/ for many more details.
    """
    print(a.replace("\n  ", "\n").strip())

def printStandardConfig():
    for i in standardconf().items():
        print("[%s]%s" % i)

def standardconf():
    a = collections.defaultdict(lambda: ("", ""))
    a["html"] = """
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
      "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
    ""","""
    </html>
    """
    
    a["head"] ="""
    <head>
    <meta name="generator" content="jemdoc, see http://jemdoc.jaboc.net/" />
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <link rel='stylesheet' type='text/css' href='jemdoc.css' />
    ""","""
    </head>
    """
  
    # used in header for window title.
    a["title"] = """
    <title>
    ""","""
    </title>
    """
  
    a["body"] = """
    <body>
    """, """
    </body>
    """
  
    a["header"] = """
    <header>
    """, """
    </header>
    """
  
    a["footer"] = """
    <footer>
    """, """
    </footer>
    """
  
    a["nav"] = """
    <nav>
    """, """
    </nav>
    """
  
    a["mathjax"] = """
    <!-- MathJax -->
    <script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>
    <!-- End MathJax -->
    """, ""
    a["mathjax"] = """
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css" integrity="sha384-yFRtMMDnQtDRO8rLpMIKrtPCD5jdktao2TV19YiZYWMDkUR5GQZR/NOVTdquEx1j" crossorigin="anonymous">
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.js" integrity="sha384-9Nhn55MVVN0/4OFx7EE5kpFBPsEMZxKTCnA+4fqDmg12eCTqGi6+BB2LjY8brQxJ" crossorigin="anonymous"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/auto-render.min.js" integrity="sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI" crossorigin="anonymous"
        onload="renderMathInElement(document.body);"></script>
    """, ""
  
    a["lastupdated"] = """
    Page generated ""","""
    by <a href="https://github.com/njnmco/njnmdoc" target="blank">njnmdoc+MathJax</a>.
    """
  
    return a

def parseconf(cns):
  syntax = standardconf()
  
  syntax['mdown'] = detect_mdown()[1]

  for sname in cns:
      with io.open(sname, 'rb') as f:
        while pc(controlstruct(f)) != '':
          l = readnoncomment(f)
          r = re.match(r'\[(.*)\]\n', l)

          if r:
            tag = r.group(1)

            s = ''
            l = readnoncomment(f)
            while l not in ('\n', ''):
              s += l
              l = readnoncomment(f)

            syntax[tag] = s

  return syntax
  

def mdown(lines, config):
    return config['mdown'](lines)

def mdown_python(lines):
    import markdown
    return markdown.markdown(lines)

def mdown_markdown(lines):
    import subprocess
    return subprocess.run(["markdown"], input=lines, stdout=subprocess.PIPE, shell=True, encoding='utf8').stdout

def mdown_pandoc(lines):
    import subprocess
    return subprocess.run(["pandoc"], input=lines, stdout=subprocess.PIPE, shell=True, encoding='utf8').stdout

def mdown_github(lines):
    import urllib
    pass


def detect_mdown():
    # Best option - python module
    try:
        import markdown
        return"python", mdown_python
    except ModuleNotFoundError as mnfe:
        pass

    import subprocess
    # Next best - markdown on system path
    try:
        subprocess.run(["markdown", "-v"],stdout=subprocess.DEVNULL)
        return "markdown", mdown_markdown
    except FileNotFoundError as fne:
        pass
  
    # Next best - pandoc on system path
    try:
        subprocess.run(["pandoc", "-v"],stdout=subprocess.DEVNULL)
        return "pandoc", mdown_pandoc
    except FileNotFoundError as fne:
        pass
  
    # Last resort - github
    return "github", mdown_github

 
def parse_meta(line, config):
    if not line.startswith("<njnmdoc "):
        return collections.defaultdict(str), False

    # strip out the attributes
    # https://stackoverflow.com/a/38305337/986793
    m = re.compile(r"""((?:(?!\s|=).)*)\s*?=\s*?["']?((?:(?<=")(?:(?<=\\)"|[^"])*|(?<=')(?:(?<=\\)'|[^'])*)|(?:(?!"|')(?:(?!\/>|>|\s).)+))""")

    meta = dict(m.findall(line))

    meta['lastupdated'] = time.strftime( '%Y-%m-%d', time.localtime(time.time()))

    if 'menu' in meta:
        with open(meta['menu']) as menu:
            meta['menu'] = mdown(menu.read(), config)

    return meta, True


def Rndr(block, *args):
    return "".join([block[0], *args, block[1]])

# this is the main template
def template(config, meta, content):
    a = config
    return \
    Rndr(a["html"],
        Rndr(a["head"],
            Rndr(a['mathjax']),
            Rndr(a["title"], meta['title'])),
        Rndr(a["body"],
            Rndr(a["header"], meta['title']),
            Rndr(a["nav"], meta['menu']),
            Rndr(a["content"], content),
            Rndr(a["footer"],
                Rndr(a['lastupdated'], meta['lastupdated']))
            )
        )



def build(infile, outfile, config):
    a = config

    with open(infile, 'r') as input:
        meta = input.readline()
        content = input.read()

    meta, valid = parse_meta(meta, config)
    if not valid:
        content = "%s\n%sn".format(meta, content)

    content = mdown(content, config)

    html = template(config, meta, content)

    with open(outfile, 'w') as out:
        out.write(html)


def main(argv):

    if len(argv) == 1 or argv[1] in ('--help', '-h'):
        showhelp()
        raise SystemExit
    if argv[1] == '--show-config':
        printStandardConfig()
        raise SystemExit
    if argv[1] == '--version':
        version()
        raise SystemExit

    outname = None
    confnames = []
    for i in range(1, len(argv), 2):
        if argv[i] == '-o':
            if outname is not None:
              raise RuntimeError("only one output file / directory, please")
            outname = argv[i+1]
        elif argv[i] == '-c':
            confnames.append(argv[i+1])
        elif argv[i].startswith('-'):
            raise RuntimeError('unrecognised argument %s, try --help' % argv[i])
        else:
            break

    conf = parseconf(confnames)

    innames = []
    for inname in argv[i:]:
        # First, if not a file and no dot, try opening .jemdoc. Otherwise, fall back
        # to just doing exactly as asked.
        if not os.path.isfile(inname):
            if not os.path.isfile(inname + ".jemdoc"):
                raise RuntimeError('unrecognised file %s' % inname)
            inname += '.jemdoc'

        innames.append(inname)

    if outname is not None and not os.path.isdir(outname) and len(innames) > 1:
        raise RuntimeError('cannot handle one outfile with multiple infiles')

    for inname in innames:
        if outname is None:
            thisout = re.sub(r'.jemdoc$', '', inname) + '.html'
        elif os.path.isdir(outname):
            # if directory, prepend directory to automatically generated name.
            thisout = outname + re.sub(r'.jemdoc$', '', inname) + '.html'
        else:
            thisout = outname

    build(inname, thisout, conf)



if __name__ == '__main__':
    main(sys.argv)
